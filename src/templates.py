"""
–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import os
from datetime import datetime, timedelta
import pytz

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
TEMPLATES_DIR = os.path.join(os.path.dirname(__file__), 'templates')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤
TEMPLATE_CONFIG = {
    'time_format': '%Y-%m-%d %H:%M',
    'date_format': '%Y-%m-%d',
    'summary_max_notifications': 5,
    'notification_lead_time_minutes': 5
}


def load_template(template_name):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω –∏–∑ —Ñ–∞–π–ª–∞
    """
    template_path = os.path.join(TEMPLATES_DIR, f"{template_name}.j2")
    try:
        with open(template_path, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        raise FileNotFoundError(f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {template_path}")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ {template_name}: {e}")


def get_template_context(task=None, summary_data=None, error_data=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–æ–≤
    """
    context = {}

    if task:
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–µ
        context.update({
            'task': task.get('task', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞'),
            'notification_time': task.get('notification', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'filename': os.path.basename(task.get('filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')),
            'complexity': task.get('complexity'),
            'complexity_emoji': get_complexity_emoji(task.get('complexity')),
            'complexity_name': get_complexity_name(task.get('complexity')),
            'duration': task.get('duration', '0'),
            'status': task.get('status', 'TODO'),
            'raw_line': task.get('raw_line', '')
        })

    if summary_data:
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤–æ–¥–∫–∏
        context.update({
            'total_tasks': summary_data.get('total_tasks', 0),
            'completed_tasks': summary_data.get('completed_tasks', 0),
            'pending_tasks': summary_data.get('pending_tasks', 0),
            'upcoming_notifications': summary_data.get('upcoming_notifications', []),
            'current_time': datetime.now().strftime(TEMPLATE_CONFIG['time_format'])
        })

    if error_data:
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—à–∏–±–æ–∫
        context.update({
            'error_type': error_data.get('error_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
            'error_message': error_data.get('error_message', ''),
            'filename': error_data.get('filename'),
            'error_time': datetime.now().strftime(TEMPLATE_CONFIG['time_format'])
        })

    return context


def get_complexity_emoji(complexity: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji –¥–ª—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    complexity_map = {
        1: 'üü©',
        2: 'üü®',
        3: 'üü•'
    }
    return complexity_map.get(complexity, '')


def get_complexity_name(complexity: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    complexity_map = {
        1: '–ù–∏–∑–∫–∞—è',
        2: '–°—Ä–µ–¥–Ω—è—è',
        3: '–í—ã—Å–æ–∫–∞—è'
    }
    return complexity_map.get(complexity, '–ù–µ —É–∫–∞–∑–∞–Ω–∞')


def get_summary_data(all_tasks):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
    """
    timezone = pytz.timezone('Europe/Samara')
    now = datetime.now(timezone)

    total_tasks = len(all_tasks)
    completed_tasks = len([t for t in all_tasks if t.get('status') == 'DONE'])
    pending_tasks = len([t for t in all_tasks if t.get('status') == 'TODO'])

    # –ë–ª–∏–∂–∞–π—à–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤)
    upcoming_notifications = []

    for task in all_tasks:
        if (task.get('status') == 'TODO' and
                task.get('notification') and
                task.get('task')):
            try:
                notification_time = datetime.strptime(
                    task['notification'],
                    TEMPLATE_CONFIG['time_format']
                )
                notification_time = timezone.localize(notification_time)
                if now <= notification_time <= now + timedelta(hours=24):
                    upcoming_notifications.append({
                        'task': task['task'][:50] + '...' if len(task['task']) > 50 else task['task'],
                        'time': task['notification']
                    })
            except ValueError:
                continue

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    upcoming_notifications.sort(key=lambda x: x['time'])
    upcoming_notifications = upcoming_notifications[:TEMPLATE_CONFIG['summary_max_notifications']]

    return {
        'total_tasks': total_tasks,
        'completed_tasks': completed_tasks,
        'pending_tasks': pending_tasks,
        'upcoming_notifications': upcoming_notifications
    }