import time
import shutil
import os
import re
import json
import asyncio
import aiohttp
import pytz
import logging
from logging.handlers import TimedRotatingFileHandler
from datetime import datetime, timedelta
from pathlib import Path
from watchdog.observers import Observer
from watchdog.observers.polling import PollingObserver
from watchdog.events import FileSystemEventHandler
from jinja2 import Environment, BaseLoader

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
from templates import load_template, get_template_context, get_summary_data

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs('logs', exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
log_handler = TimedRotatingFileHandler(
    filename='logs/task_monitor.log',
    when='midnight',  # –†–æ—Ç–∞—Ü–∏—è –≤ –ø–æ–ª–Ω–æ—á—å
    interval=1,  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
    backupCount=10,  # –•—Ä–∞–Ω–∏—Ç—å 10 —Ñ–∞–π–ª–æ–≤ (10 –¥–Ω–µ–π)
    encoding='utf-8'
)

# –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –¥–ª—è —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–¥–æ–±–∞–≤–∏—Ç –¥–∞—Ç—É –∫ –∏–º–µ–Ω–∏)
log_handler.suffix = "%Y-%m-%d"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        log_handler  # –†–æ—Ç–∏—Ä—É–µ–º—ã–π –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

VAULT_PATH = os.getenv('VAULT_PATH', '/home/aborisov/projects/my/obsidian-utils/source/daily')
task_pattern_open = u'- [ ]'
task_pattern_close = u'- [x]'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'your_bot_token_here')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', 'your_chat_id_here')
TIMEZONE = os.getenv('TIMEZONE', 'Europe/Samara')
DURATION_TOMATO = int(os.getenv('TIMEZONE', 30))


timezone = pytz.timezone(TIMEZONE)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Jinja2 environment
jinja_env = Environment(loader=BaseLoader())

# –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
template_cache = {}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
all_tasks = []
notification_sent = set()


def get_template(template_name: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞
    """
    if template_name not in template_cache:
        try:
            template_content = load_template(template_name)
            template_cache[template_name] = jinja_env.from_string(template_content)
            logger.debug(f"–®–∞–±–ª–æ–Ω {template_name} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ {template_name}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback —à–∞–±–ª–æ–Ω
            fallback_template = "{{ task }}"
            template_cache[template_name] = jinja_env.from_string(fallback_template)

    return template_cache[template_name]


def parse_obsidian_task(s: str, filename: str = "") -> dict:
    match = re.search(r"-\s*\[(?P<status>[\w\s\/])\]\s*(?P<data>[^:].*)", s)
    complexity = 0
    if match:
        status = match.group('status')
        data = match.group('data')

        if status == 'x':
            ret = {'status': 'DONE'}
        else:
            ret = {'status': 'TODO'}

        ret['filename'] = filename
        ret['raw_line'] = s.strip()

        if 'üü©' in data:
            data = data.replace('üü©', '')
            ret['complexity'] = 1
        if 'üü® ' in data:
            data = data.replace('üü®', '')
            ret['complexity'] = 2
        if 'üü• ' in data:
            data = data.replace('üü•', '')
            ret['complexity'] = 3

        if 'üìÖ' in data:
            match_date = re.search(r"üìÖ\s*(?P<date>\d{4}-\d{2}-\d{2})", data)
            if match_date:
                date = match_date.group('date')
                ret['date'] = date
                # –£–¥–∞–ª—è–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
                date_pattern = re.compile(r"üìÖ\s*\d{4}-\d{2}-\d{2}")
                data = date_pattern.sub('', data)

        if '‚úÖ' in data:
            match_completed_date = re.search(r"‚úÖ\s*(?P<completed_date>\d{4}-\d{2}-\d{2})", data)
            if match_completed_date:
                completed_date = match_completed_date.group('completed_date')
                ret['completed_date'] = completed_date
                data = data.replace(f"‚úÖ {completed_date}", '')

        if '@completed(' in data:
            match_completed = re.search(r"@completed\((?P<completed>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})\)", data)
            if match_completed:
                completed = match_completed.group('completed')
                ret['completed'] = completed
                data = data.replace(f"@completed({completed})", '')

        ret['notification'] = None
        if '(@' in data:
            match_notification = re.search(r"\(@(?P<notification>\d{4}-\d{2}-\d{2}\s\d{1,2}:\d{2})\)", data)
            if match_notification:
                notification = match_notification.group('notification')
                ret['notification'] = notification
                data = data.replace(f"(@{notification})", '')

        if '[üçÖ' in data:
            match_duration = re.search(r"\[üçÖ::(?P<duration>\d+)\]", data)
            if match_duration:
                duration = int(match_duration.group('duration'))
                ret['duration'] = duration * DURATION_TOMATO
                # –£–¥–∞–ª—è–µ–º –ø–æ–º–∏–¥–æ—Ä–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
                data = re.sub(r'\s*\[üçÖ::\d+\]\s*', ' ', data)
        else:
            ret['duration'] = 0

        # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        data = re.sub(r'\s+', ' ', data).strip()
        ret['task'] = data

        return ret
    return {}


def parse_obsidian_file(filename):
    """–ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    file_tasks = []

    if not os.path.isabs(filename):
        base_path = Path(VAULT_PATH)
        filename = str(base_path / filename)

    if filename.endswith(".md") and os.path.exists(filename):
        try:
            with open(filename, encoding="utf8", errors='ignore') as in_put:
                for line in in_put:
                    if task_pattern_open in line or task_pattern_close in line:
                        task = parse_obsidian_task(line, filename)
                        if task:
                            file_tasks.append(task)
            logger.info(f"–§–∞–π–ª {filename} –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(file_tasks)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")

    return file_tasks


def scan_all_files():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ VAULT_PATH –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏"""
    global all_tasks
    all_tasks = []

    logger.info(f"–ù–∞—á–∞—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ {VAULT_PATH}...")

    for root, dirs, files in os.walk(VAULT_PATH):
        for file in files:
            if file.endswith('.md'):
                file_path = os.path.join(root, file)
                rel_path = os.path.relpath(file_path, VAULT_PATH)
                tasks = parse_obsidian_file(rel_path)
                all_tasks.extend(tasks)

    logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(all_tasks)}")
    return all_tasks


def render_template(template_name: str, context: dict) -> str:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç —à–∞–±–ª–æ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Jinja2"""
    try:
        template = get_template(template_name)
        return template.render(context).strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ —à–∞–±–ª–æ–Ω–∞ {template_name}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback
        return f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {context.get('task', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞')}"


async def send_telegram_notification(task):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞"""
    if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == 'your_bot_token_here':
        logger.warning("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = get_template_context(task=task)

    # –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    message = render_template('notification', context)

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown'
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {task['task']}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {await response.text()}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")


async def send_task_summary():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º"""
    if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == 'your_bot_token_here':
        logger.warning("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–∫–∏
    summary_data = get_summary_data(all_tasks)

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = get_template_context(summary_data=summary_data)

    # –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    message = render_template('task_summary', context)

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown'
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info("–°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {await response.text()}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –≤ Telegram: {e}")


async def send_error_notification(error_message: str, filename: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == 'your_bot_token_here':
        logger.warning("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    error_data = {
        'error_type': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞',
        'error_message': error_message,
        'filename': filename
    }

    context = get_template_context(error_data=error_data)
    message = render_template('error_notification', context)

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown'
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {await response.text()}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


def check_notifications():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    global all_tasks, notification_sent

    now = datetime.now(timezone)
    notifications_found = 0

    for task in all_tasks:
        if task['status'] != 'TODO':
            continue

        notification = task.get('notification')
        if not notification:
            continue

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏
        task_id = f"{task['filename']}:{task['raw_line']}"

        if task_id in notification_sent:
            continue

        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_time = datetime.strptime(notification, '%Y-%m-%d %H:%M')
            notification_time = timezone.localize(notification_time)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            time_diff = notification_time - now
            if timedelta(seconds=0) <= time_diff <= timedelta(minutes=5):
                logger.info(f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –ó–∞–¥–∞—á–∞: {task['task']}")
                asyncio.run(send_telegram_notification(task))
                notification_sent.add(task_id)
                notifications_found += 1

        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {notification}, –æ—à–∏–±–∫–∞: {e}")

    if notifications_found > 0:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_found}")


class SyncHandler(FileSystemEventHandler):
    def __init__(self, source_dir):
        self.source_dir = source_dir

    def update_file_tasks(self, src_path):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(src_path):
            logger.warning(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {src_path}")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        rel_path = os.path.relpath(src_path, self.source_dir)
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞: {rel_path}")

        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        new_tasks = parse_obsidian_file(rel_path)

        # –û–±–Ω–æ–≤–ª—è–µ–º global all_tasks
        global all_tasks

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        initial_count = len(all_tasks)
        all_tasks = [task for task in all_tasks if task.get('filename') != rel_path]
        removed_count = initial_count - len(all_tasks)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        all_tasks.extend(new_tasks)

        logger.info(
            f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —É–¥–∞–ª–µ–Ω–æ {removed_count} –∑–∞–¥–∞—á, –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(new_tasks)} –∑–∞–¥–∞—á. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(all_tasks)}")

    def on_created(self, event):
        if not event.is_directory:
            logger.debug(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {event.src_path}")
            self.update_file_tasks(event.src_path)

    def on_modified(self, event):
        if not event.is_directory:
            logger.debug(f"–ò–∑–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: {event.src_path}")
            self.update_file_tasks(event.src_path)

    def on_moved(self, event):
        if not event.is_directory:
            logger.debug(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª: {event.src_path} -> {event.dest_path}")
            self.update_file_tasks(event.dest_path)

    def on_deleted(self, event):
        if not event.is_directory:
            logger.debug(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {event.src_path}")
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            global all_tasks
            rel_path = os.path.relpath(event.src_path, self.source_dir)
            initial_count = len(all_tasks)
            all_tasks = [task for task in all_tasks if task.get('filename') != rel_path]
            removed_count = initial_count - len(all_tasks)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞: {rel_path}")


def start_sync_monitoring(source_dir):
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""

    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    scan_all_files()

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    event_handler = SyncHandler(source_dir)
    observer = PollingObserver()
    observer.schedule(event_handler, source_dir, recursive=True)

    observer.start()
    logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: {source_dir}")
    logger.info(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(all_tasks)}")

    try:
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            check_notifications()
            time.sleep(30)

    except KeyboardInterrupt:
        observer.stop()
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    observer.join()


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if len(os.sys.argv) > 1:
        if os.sys.argv[1] == 'scan':
            logger.info("–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            scan_all_files()
            logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        elif os.sys.argv[1] == 'summary':
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏...")
            asyncio.run(send_task_summary())
            logger.info("–°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    else:
        start_sync_monitoring(VAULT_PATH)